FUND:

BANK MASTER: db.bank_master.find({entryDate: {$regex: /^16\/10\/2024/}}) Note - Change the date to find the entries for that date.
BENCHMARK MASTER: db.benchmark_master.find({entryDate: {$regex: /^16\/10\/2024/}}) Note - Change the date to find the entries for that date.
CLASS MASTER: db.class_master.find({entryDate: {$regex: /^16\/10\/2024/}}) Note - Change the date to find the entries for that date.
CLIENT_MASTER: db.client_master.find({entryDate: {$regex: /^16\/10\/2024/}}) Note - Change the date to find the entries for that date.
CONTACT_MASTER: db.contact_master.find({entryDate: {$regex: /^16\/10\/2024/}}) Note - Change the date to find the entries for that date.
DD_MASTER: db.dd_master.find({entryDate: {$regex: /^16\/10\/2024/}}) Note - Change the date to find the entries for that date.
FUND_MASTER: db.fund_master.find({entryDate: {$regex: /^16\/10\/2024/}}) Note - Change the date to find the entries for that date.
PLAN_MASTER: db.plan_master.find({entryDate: {$regex: /^16\/10\/2024/}}) Note - Change the date to find the entries for that date.
LOAD_MASTER: db.load_master.find({entryDate: {$regex: /^16\/10\/2024/}}) Note - Change the date to find the entries for that date.


INVESTOR:

fnxBendemMaster = db.fnxBendemMaster.distinct("batchNo", {
    statusUpdateDate: {
        $gte: ISODate("2024-03-21T00:00:00.000Z"),
        $lt: ISODate("2024-03-22T00:00:00.000Z")
    }
}).length *Note - Change the date to find the entries for that date.*

fnxDrawDownDetails = const distinctBatchNos = db["bank master"].distinct("batchNo", {
    entryDate: {
        $regex: /^16\/10\/2024/
    }
});

const distinctCount = distinctBatchNos.length;

print("Distinct batchNo count:", distinctCount);

fnxEndorsementMaster = const distinctEndorsementBatches = db["bank master"].distinct("endorsementBatch", {
    endorsementBatch: { $ne: null }, // Ensure endorsementBatch is not null
    entryDate: {
        $regex: /^16\/10\/2024/ // Filter by specific entryDate
    }
});

const distinctCount = distinctEndorsementBatches.length;

print("Distinct endorsementBatch count:", distinctCount);

fnxIncomeDistribution/fnxIncomeDistributionRecords = const distinctEndorsementBatches = db["bank master"].distinct("endorsementBatch", {
    endorsementBatch: { $ne: null }, // Ensure endorsementBatch is not null
    entryDate: {
        $regex: /^16\/10\/2024/ // Filter by specific entryDate
    }
});

const distinctCount = distinctEndorsementBatches.length;

print("Distinct endorsementBatch count:", distinctCount);

fnxInitialContribution = const distinctInitialContribution = db.fnxInitialContribution.distinct("parentTransactionNo", {
    parentTransactionNo: { $ne: null }, // Ensure Batch is not null
    entryDate: {
        $regex: /^16\/10\/2024/ // Filter by specific Date
    }
});

const distinctCount = distinctInitialContribution.length;

print("Distinct initialContribution count:", distinctCount);



fnxInvTransactionStatementDetails = const distinctInvTransactionStatement = db.fnxInvTransactionStatementDetails.distinct("batchNo", {
    batchNo: { $ne: null }, // Ensure Batch is not null
    statementUploadDate: {
        $regex: /^12\/9\/2024/ // Filter by specific Date
    }
});

const distinctCount = distinctInvTransactionStatement.length;

print("Distinct statementDetails count:", distinctCount);

fnxInvestorDetails = const distinctEndorsementBatches = db["bank master"].distinct("endorsementBatch", {
    endorsementBatch: { $ne: null }, // Ensure endorsementBatch is not null
    entryDate: {
        $regex: /^16\/10\/2024/ // Filter by specific entryDate
    }
});

const distinctCount = distinctEndorsementBatches.length;

print("Distinct endorsementBatch count:", distinctCount);

fnxNavDetails = const distinctNavDetails = db.fnxNavDetails.distinct("batchNo", {
    batchNo: { $ne: null }, // Ensure endorsementBatch is not null
    creationDate: {
        $regex: /^16\/10\/2024/ // Filter by specific entryDate
    }
});

const distinctCount = distinctNavDetails.length;

print("Distinct NavDetails count:", distinctCount);

fnxPledgeUnpledgeDetails = const distinctPledgeDetails = db.fnxPledgeUnpledgeDetails.distinct("folioNo", {
    folioNo: { $ne: null }, // Ensure endorsementBatch is not null
    agreementDate: {
        $regex: /^26\/09\/2024/ // Filter by specific entryDate
    }
});

const distinctCount = distinctPledgeDetails.length;

print("Distinct NavDetails count:", distinctCount);

fnxPostProcessRejectDetails = const distinctPostProcessDetails = db.fnxPostProcessRejectDetails.distinct("folioNo", {
    folioNo: { $ne: null }, // Ensure endorsementBatch is not null
    createdDate: {
        $regex: /^9\/10\/2024/ // Filter by specific entryDate
    }
});

const distinctCount = distinctPostProcessDetails.length;

print("Distinct PostProcess count:", distinctCount);

fnxPreProcessRejectDetails = const distinctPreProcessRejectDetails = db.fnxPreProcessRejectDetails.distinct("folioNo", {
    folioNo: { $ne: null }, // Ensure endorsementBatch is not null
    creationDate: {
        $regex: /^10\/10\/2024/ // Filter by specific entryDate
    }
});

const distinctCount = distinctPreProcessRejectDetails.length;

print("Distinct PreProcess count:", distinctCount);

fnxRedemptionBatchesDetails = const distinctRedemptionBatchesDetails = db.fnxRedemptionBatches.distinct("batchNo", {
    batchNo: { $ne: null }, // Ensure endorsementBatch is not null
    creationDate: {
        $regex: /^10\/10\/2024/ // Filter by specific entryDate
});

const distinctCount = distinctRedemptionBatchesDetails.length;

print("Distinct PreProcess count:", distinctCount);

fnxRedemptionDetails = const distinctRedemptionDetails = db.fnxRedemptionDetails.distinct("folioNo", {
    folioNo: { $ne: null }, // Ensure endorsementBatch is not null
    entryDate: {
        $regex: /^18\/9\/2024/ // Filter by specific entryDate, month single digit has no zeros
    }
});

const distinctCount = distinctRedemptionDetails.length;

print("Distinct RedemptionDetails count:", distinctCount);

fnxRefundPayoutsDetails =  const distinctRefundPayoutDetails = db.fnxRefundPayoutsDetails.distinct("batchNo", {
    batchNo: { $ne: null }, // Ensure endorsementBatch is not null
    creationDate: {
        $regex: /^16\/10\/2024/ // Filter by specific entryDate, month single digit has no zeros
    }
});

const distinctCount = distinctRefundPayoutDetails.length;

print("Distinct RefundPayoutsDetails count:", distinctCount);

fnxTopUpDetails = const distinctTopUpDetails = db.fnxTopUpDetails.distinct("transactionNo", {
    transactionNo: { $ne: null }, // Ensure endorsementBatch is not null
    entryDate: {
        $regex: /^22\/10\/2024/ // Filter by specific entryDate, month single digit has no zeros
    }
});

const distinctCount = distinctTopUpDetails.length;

print("Distinct RefundPayoutsDetails count:", distinctCount);

fnxTransactionInitiationDocUpload = const TransactionInitiationDocUploadDetails = db.fnxTransactionInitiationDocUpload.distinct("transactionNo", {
    transactionNo: { $ne: null }, // Ensure endorsementBatch is not null
    createdOn: {
        $regex: /^22\/10\/2024/ // Filter by specific entryDate, month single digit has no zeros
    }
});

const distinctCount = TransactionInitiationDocUploadDetails.length;

print("Distinct RefundPayoutsDetails count:", distinctCount);

fnxTransferProcessing = const distinctTransferProcessingDetails = db.fnxTransferProcessing.distinct("transactionNo", {
    transactionNo: { $ne: null }, // Ensure endorsementBatch is not null
    creationDate: {
        $regex: /^10\/10\/2024/ // Filter by specific entryDate, month single digit has no zeros
    }
});

const distinctCount = distinctTransferProcessingDetails.length;

print("Distinct TransferProcessingDetails count:", distinctCount);

fnxTransmissionDetails = const distinctTransmissionDetailsDetails = db.fnxTransmissionDetails.distinct("folioNo", {
    folioNo: { $ne: null }, // Ensure endorsementBatch is not null
    transmissionDate: {
        $regex: /^01\/10\/2024/ // Filter by specific entryDate, month single digit has no zeros
    }
});

const distinctCount = distinctTransmissionDetailsDetails.length;

print("Distinct TransmissionDetailsDetails count:", distinctCount);

fnxbankStatementDetails = const distinctbankStatementDetails = db.fnxbankStatementDetails.distinct("batchNo", {
    batchNo: { $ne: null }, // Ensure endorsementBatch is not null
    createdDate: {
        $regex: /^16\/10\/2024/ // Filter by specific entryDate, month single digit has no zeros
    }
});

const distinctCount = distinctbankStatementDetails.length;

print("Distinct bankStatementDetails count:", distinctCount);












